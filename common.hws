; Appends a message to the specified TextView
Function p_WriteToTextView(textView$, message$)
	Local currentMessages$ = moai.Get(textView$, "Text")
	If currentMessages$ = ""
		currentMessages$ = message$
	Else
		currentMessages$ = currentMessages$ .. "\r\n" .. message$
	EndIf
	moai.Set(textView$, "Text", currentMessages$)
EndFunction

; Intercept special types of messages
Function p_ProcessMessagesByType(message$)
	If #DEBUG Then DebugPrint("p_ProcessMessagesByType(): Detecting message type for:", message$)
	If StartsWith(message$, "Server: /CLIENTS ") 
		If #DEBUG Then DebugPrint("p_ProcessMessagesByType(): New Client list received")
		
	ElseIf StartsWith(message$, "Server: /COMMAND ") 
		If #DEBUG Then DebugPrint("p_ProcessMessagesByType(): New command received")
	ElseIf StartsWith(message$, "Server: /NICKS ") 
		If #DEBUG Then DebugPrint("p_ProcessMessagesByType(): New list of Nicks received")
	ElseIf StartsWith(message$, "Server: /DISCONNECT")
		p_Log("Received Disconnect command from server")
		p_WriteToTextView("textviewMessages", "Server was stopped, all clients disconnected!")
		p_DisconnectFromServer()
	Else
		If #DEBUG Then DebugPrint("p_ProcessMessagesByType(): Simple text, broadcasting to TextView...")
		p_WriteToTextView("textviewMessages", message$)
	EndIf
EndFunction

Function p_Log(text$)
	moai.DoMethod("log", "insert", "bottom", GetTime(True) .. ": " .. text$)
	moai.DoMethod("log", "jump", "bottom")
EndFunction

; Send a message to all clients
Function p_SendMessage(message$)
	p_Log("Sending message: " .. message$)
	p_WriteToTextView("textviewMessages", message$)
	message$ = nick$ .. ": " .. message$
	ForEach(clients, p_SendData, message$ .. "\r\n")
EndFunction

; Send a message to a connected client
Function p_SendData(index, clientId, message$)
	SendData(clientId, message$)
EndFunction

; Insert a Client in Listview
Function p_InsertClientInListview(index, clientId)
	moai.DoMethod("lv_clients", "Insert", index, GetConnectionIP(clientId))
EndFunction

; Update the Clients listview
Function p_UpdateClientsListview(clients)
	moai.DoMethod("lv_clients", "Clear")
	ForEach(clients, p_InsertClientInListview)
EndFunction

; Add a new connection to the clients Table
Function p_AddConnection(clientId)
	If Not HaveItem(clients, clientId)
		If #DEBUG Then DebugPrint("New Client connected: ", clientId)
		InsertItem(clients, clientId)
		p_UpdateClientsListview(clients)
	EndIf
EndFunction

Function p_LocateClientIndex(index, Id)
	If Id = clientIdToRemove Then RemoveItem(clients, index)
EndFunction

; Remove a connection from the clients table
Function p_RemoveConnection(Id)
	If #DEBUG Then DebugPrint("Client disconnected: ", Id)
	clientIdToRemove = Id
	ForEach(clients, p_LocateClientIndex)
	p_UpdateClientsListview(clients)
	clientIdToRemove = Nil
EndFunction

; Handle RapaGUI events
Function p_EventFunc(msg)
	Switch msg.action
	Case "RapaGUI"
		Switch msg.attribute
			
			Case "Pressed":
				If #DEBUG Then DebugPrint("Received Button Pressed Event")
				p_GUIEvent(msg.id)
			
			Case "Acknowledge":
				If #DEBUG Then DebugPrint("Received Textentry.Acknowledge event")
				p_GUIEvent(msg.id)
				
			Case "Selected":
				If #DEBUG Then DebugPrint("Received Menu Selected Event")
				p_GUIEvent(UnrightStr(msg.id, 3))
					
			Case "File":
				p_Log("LWSN is found at: " .. msg.triggervalue)
				
			Case "Path":
				Switch msg.id
					Case "CmdDir":
						p_Log("Cmd Dir: " .. msg.triggervalue)
						
					Case "ProjectsDir":
						p_Log("Projects Path: " .. msg.triggervalue)
						
				EndSwitch
			
			Case "CloseRequest":
				moai.Set(msg.id, "open", False)
	
		EndSwitch
	EndSwitch
EndFunction

; Handle GUI events
Function p_GUIEvent(id)
	Switch id
		Case "start":
			Local port = moai.Get("txtPort", "Text")
			p_StartServer(port)
			
		Case "stop":
			p_StopServer()
		
		Case "connect":
			Local server = moai.Get("txtServer", "Text")
			Local port = moai.Get("txtPort", "Text")
			p_ConnectToServer(server, port)
			
		Case "disconnect":
			p_DisconnectFromServer()
		
		Case "txtMessage":
			Local message$ = moai.Get("txtMessage", "Text")
			p_SendMessage(message$)
			moai.Set("txtMessage", "Text", "")
			
		Case "send":
			Local message$ = moai.Get("txtMessage", "Text")
			;Local receiver = Moai.Get("listClients", "active")
			p_SendMessage(message$)
			moai.Set("txtMessage", "Text", "")
		
		Case "settings":
			moai.Set("settings", "open", True)
		
		Case "about":
			moai.Request("ScreamerNet3", "ScreamerNet3 (c) by Dimitris Panokostas\r\r\n" ..
					"A tool for managing nodes in a Lightwave\n" ..
					"ScreamerNet render farm.\n", "OK")
		
		Case "quit":
			p_DisconnectFromServer()
			End
		
		Case "quitServer":
			p_StopServer()
			End
	EndSwitch
EndFunction